# 计算机操作系统实验报告
2013060105010 高泽仁

## 一、实验名称：生产者消费者问题
## 二、实验目的：
共享缓冲区中放置一个数字，取值范围为[0, 10]，初值为0。生产者将此值加1，消费者将此值减1。

1. 场景1
  * 同一进程内启动一组生产者线程和一组消费者线程
  * 缓冲区为本进程的全局变量
2. 场景2
  * 启动一组生产者进程和一组消费者进程
  * 同一个数据文件为缓冲区

* 输入
  * `p`：生产者数量
  * `c`：消费者数量
* 输出

  打印当前共享缓冲区中的数值，或者生产者消费者的状态。
## 三、实验环境
* 操作系统：Linux(Debian GNU/Linux 8)
* 语言：Python3.4.2  
## 四、实验内容
### 1.准备
#### 使用多线程实现生产者消费者问题
* 多线程库(threading)：虽然python的多线程受制于GIL使得它同一时刻只能有一个线程在运行，但是我们只需要它的异步的特性。
```python
import threading
def test():
  pass
t = threading.Thread(target=test, args=())
t.start()
```
* 信号量机制(threading.Semaphore)：python已经为我们提供了现成的信号量机制。
```python
import threading
s = threading.Semaphore(2)#其中参数为信号量初值，默认为1，不能小于0
def test():
  s.acquire()#申请资源
  s.release()#释放资源
```
* 全局变量：我们需要打印目前缓冲区内的资源数，故全局变量是必要的。
```python
i = 0
def test():
  global i
  print(i)
  i += 1
  print i
```
#### 使用多进程实现生产者消费者问题
* 多进程库(multiprocessing)：万幸的是，python为我们提供了真正的多进程库，它的用法和threading非常类似。
```python
import multiprocessing
def test():
	pass
p = multiprocessing.Process(target=test, args=())
p.start()
```
* 信号量机制(multiprocessing.Semaphore)：与threading库中的信号量机制一样，不再赘述。
### 2.实现（源代码）
```python
import threading
import time
import multiprocessing

__author__ = 'SinLapis'
# environment: Linux, Python3.4.2

producer_count = 0
consumer_count = 0
choice = 0
var_buffer = 0
file_buffer = open('buffer.txt', mode='w')
file_buffer.write('0')
file_buffer.close()


class MultiThread:
    @staticmethod
    def main(producer_count, consumer_count):
        empty = threading.Semaphore(10)
        full = threading.Semaphore(0)
        mutex = threading.Semaphore()

        def producer(sleep_time, producer_num):
            global var_buffer
            while True:
                empty.acquire()
                mutex.acquire()
                print("producer %d: %d -> %d\n" % (producer_num, var_buffer,
                                                   var_buffer + 1))
                var_buffer += 1
                mutex.release()
                full.release()
                time.sleep(sleep_time)

        def consumer(sleep_time, consumer_num):
            global var_buffer
            while True:
                full.acquire()
                mutex.acquire()
                print("consumer %d: %d -> %d\n" % (consumer_num, var_buffer,
                                                   var_buffer - 1))
                var_buffer -= 1
                mutex.release()
                empty.release()
                time.sleep(sleep_time)

        for j in range(0, producer_count):
            t = threading.Thread(target=producer, args=(3, j))
            t.start()
        for j in range(0, consumer_count):
            t = threading.Thread(target=consumer, args=(2, j))
            t.start()


class MultiProcess():
    @staticmethod
    def main(producer_count, consumer_count):
        empty = multiprocessing.Semaphore(10)
        full = multiprocessing.Semaphore(0)
        mutex = multiprocessing.Semaphore()

        def producer(sleep_time, producer_num):
            while True:
                empty.acquire()
                mutex.acquire()
                file_buffer = open('buffer.txt')
                res = int(file_buffer.read())
                file_buffer.close()
                print("producer %d: %d -> %d\n" % (producer_num, res,
                                                   res + 1))
                res += 1
                file_buffer = open('buffer.txt', mode='w')
                file_buffer.write(str(res))
                file_buffer.close()
                mutex.release()
                full.release()
                time.sleep(sleep_time)

        def consumer(sleep_time, consumer_num):
            while True:
                full.acquire()
                mutex.acquire()
                file_buffer = open('buffer.txt')
                res = int(file_buffer.read())
                file_buffer.close()
                print("consumer %d: %d -> %d\n" % (consumer_num, res,
                                                   res - 1))
                res -= 1
                file_buffer = open('buffer.txt', mode='w')
                file_buffer.write(str(res))
                file_buffer.close()
                mutex.release()
                empty.release()
                time.sleep(sleep_time)

        for j in range(0, producer_count):
            t = multiprocessing.Process(target=producer, args=(3, j))
            t.start()
        for j in range(0, consumer_count):
            t = multiprocessing.Process(target=consumer, args=(2, j))
            t.start()


if __name__ == '__main__':
    while True:
        producer_count = int(input('Producer count: '))
        if producer_count > 0:
            break
        print("Error!")
    while True:
        consumer_count = int(input('Consumer count: '))
        if consumer_count > 0:
            break
        print("Error!")
    while True:
        choice = int(input("Multi-thread or multi-process?\n1.Multi-thread\n"
                           "2.Multi-process\n"))
        if choice == 1 or choice == 2:
            break
        print("Error!")
    if choice == 1:
        MultiThread.main(producer_count, consumer_count)
    else:
        MultiProcess.main(producer_count, consumer_count)
```
### 3.运行结果

![测试截图1][1]

![测试截图2][2]

![测试截图3][3]


  [1]: ./images/%E6%8A%93%E5%9B%BE1.png "测试截图1"
  [2]: ./images/%E6%8A%93%E5%9B%BE2.png "测试截图2"
  [3]: ./images/%E6%8A%93%E5%9B%BE3.png "测试截图3"